apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
?sapply
?split
?tapply
?with
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
?tapply
debug(ls)
?ls
debug(ls)
mean()
library(datasets)
data(iris)
?iris
iris[,1]
iris[,1:2]
with(iris, tapply(Sepal.Length, Species, mean))
library(datasets)
data(mtcars)
?mtcars
with(mtcars, tapply(hp, cyl, mean))
apply(iris[, 1:4], 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cachemean(y)
makevector(y)
makeVector(y)
cachemean(y)
debug(cachemean(y))
cachemean <- function(x, ...) {
cachemean(y)
View(cachemean)
View(makeVector)
y
y<-vector(1:45)
?vector
z
makeVector
k<-makeVector()
k
cachemean(z)
k<-makeVector(z)
cachemean(k)
cachemean(k)
mean(z)
?solve
?inverse
mymatrix <- matrix(2,2)
mymatrix
?matrix
mymatrix <- matrix(c(4,3,3,2)2,2)
mymatrix <- matrix(c(4,3,3,2),2,2)
mymatrix
solve(mymatrix)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
k<-makeCacheMatrix(mymatrix)
cacheSolve(k)
mymatrix2<-matrix(c(1,2,3,4), 2,2)
mymatrix2
solve(mymatrix2)
j<-makeCacheMatrix(mymatrix2)
cacheSolve(j)
cacheSolve(k)
cacheSolve(j)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(j)
j<-makeCacheMatrix(mymatrix)
cacheSolve(j)
j$setMatrix(mymatrix2)
cacheSolve(j)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
install.packages(httr)
install.packages("httr")
library(httr)
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
source('~/R Homework/GithubAPI.R')
install.packages("Rcpp")
source('~/R Homework/GithubAPI.R')
install.packages("httpuv")
source('~/R Homework/GithubAPI.R')
req
req[1]
req[2]
content(req,as=text)
content(req,as="parsed")
req[30]
req[[30]]
content(req,as="text")
html <- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html")
library(XML)
html <- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html", useInternalNodes = T)
html
xpathSApply(html,"//p", xmlValue)
nrow(html)
readLines("http://biostat.jhsph.edu/~jleek/contact.html")
html<-readLines("http://biostat.jhsph.edu/~jleek/contact.html")
html[10]
nchar(html[10])
nchar(html[20])
nchar(html[30])
nchar(html[100])
read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
html<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
nrow(html)
ncol(html)
html<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", header = T, sep="")
ncol(html)
html
head(html)
html[1,]
html[1,9]
html[1,8]
html[1,4]
html<-read.delim("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", header = T)
ncol(html)
html<-read.delim("C:/Users/kerry_000/Downloads/getdata-wksst8110.for", header = T)
ncol(html)
html<-read.csv("C:/Users/kerry_000/Downloads/getdata-wksst8110.for", header = T, sep="")
html<-read.csv("C:/Users/kerry_000/Downloads/getdata-wksst8110 (1).for", header = T, sep="")
ncol(html)
html[1,]
html[1,4]
html<-read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
html[1,]
sum(html[,4])
html<-readLines("http://biostat.jhsph.edu/~jleek/contact.html")
nchar(html[10])
nchar(html[20])
nchar(html[30])
nchar(html[100])
file.exists("household_power_consumption")
getwd
getwd()
file.exists("household_power_consumption.txt")
file.exists("household_power_consumption.txt", "household_power_consumption.zip")
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
dim(exdata)
str(exdata)
head(exdata)
source('~/GitHub/ExData_Plotting1/plot1.R')
str(exdata)
source('~/GitHub/ExData_Plotting1/plot1.R')
exdata$Date <- as.Date(exdata$Date)
str(exdata)
exdata$Date <- as.Date(exdata$Date, "%mm-%dd-%Y)
exdata$Date <- as.Date(exdata$Date, "%mm-%dd-%Y")
exdata$Date <- as.Date(exdata$Date, "%mm-%dd-%Y")
str(exdata)
exdata$Date <- as.Date(exdata$Date)
str(exdata)
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
str(exdata)
exdtat<-""
exdtata<-""
source('~/GitHub/ExData_Plotting1/plot1.R')
str(exdata)
exdtata<-""
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
str(exdata)
source('~/GitHub/ExData_Plotting1/plot1.R')
str(exdata)
head(exdata)
exdata[exdata$Date >="2007-02-01",]
exdata[exdata$Date >=as.Date("2007-02-01"),]
exdata[exdata$Date == as.Date("2007-02-01"),]
head(exdata[50,])
head(exdata, 50)
exdata[2500:3500,]
exdata$Date <- as.Date(exdata$Date, "%dd/%mm/%yyyy")
head(exdata)
exdata<-""
source('~/GitHub/ExData_Plotting1/plot1.R')
head(exdata)
exdata<-""
source('~/GitHub/ExData_Plotting1/plot1.R')
head(exdata)
exdata<-""
source('~/GitHub/ExData_Plotting1/plot1.R')
head(exdata)
exdata<-""
source('~/GitHub/ExData_Plotting1/plot1.R')
head(exdata)
as.Date(exdata$Date, "%d/%m/%Y")
exdata<-""
source('~/GitHub/ExData_Plotting1/plot1.R')
head(exdata)
exdata[exdata$Date == as.Date("2007-02-01"),]
exdata[exdata$Date == as.Date("2007-02-01"),1]
exdata[exdata$Date == as.Date("2007-02-01"),1:3]
exdata[(exdata$Date >=as.Date("2007-02-01")& (exdata$Date <=as.Date("2007-02-02")),]
exdata[(exdata$Date >=as.Date("2007-02-01")) & (exdata$Date <=as.Date("2007-02-02")),]
exdata[(exdata$Date >=as.Date("2007-02-01")) & (exdata$Date <=as.Date("2007-02-02")),1:3]
exdata<-""
source('~/GitHub/ExData_Plotting1/plot1.R')
dim(exdata)
head(exdata)
library(dplyr)
exdata<-""
source('~/GitHub/ExData_Plotting1/plot1.R')
exdata[exdata$Date=="2007/02/01"]
exdata[exdata$Date=="2007/02/01",]
exdata[grepl("2007/02/01", exdata$Date),]
head(exdata)
exdata[grepl("01/02/2007", exdata$Date),]
exdata[grepl("2007-02-01", exdata$Date),]
exdata$Date <- as.Date(exdata$Date,"%d/%m/%Y")
exdata <- exdata[(exdata$Date >=as.Date("2007-02-01")) & (exdata$Date <=as.Date("2007-02-02")),]
dim(exdata)
mutate(exdata, DateTime = as.character(exdata$Date) + exdata$Time)
mutate(exdata, DateTime = paste(as.character(exdata$Date), exdata$Time, sep=" "))
library(dplyr)
exdtat$DateTime <- past(exdata$Date, exdata$Time, sep=" ")
exdtat$DateTime <- paste(exdata$Date, exdata$Time, sep=" ")
exdtat
exdtat$DateTime <- strptime(exdtat$DateTime)
exdtat$DateTime <- strptime(exdtat$DateTime, format="%Y-%m-%d %H:%M:%S", tz="")
str(exdtat)
exdata$DateTime <- paste(exdata$Date, exdata$Time, sep=" ")
exdata$DateTime <- strptime(exdata$DateTime, format="%Y-%m-%d %H:%M:%S", tz="")
str(exdata)
exdata<-""
source('~/GitHub/ExData_Plotting1/plot1.R')
str(exdata)
hist(exdata$Global_active_power)
hist(exdata$Global_active_power, col="red")
title(main="Global Active Power")
hist(exdata$Global_active_power, col="red", title="Global Active Power")
hist(exdata$Global_active_power, col="red")
hist(exdata$Global_active_power, col="red")
hist(exdata$Global_active_power, col="red", main="Global Active Power")
hist(exdata$Global_active_power, col="red", main="Global Active Power", xlab = "Global Active Power (kilowatts)")
source('~/GitHub/ExData_Plotting1/plot1.R')
plot(exdata$DateTime, exdata$Global_active_power, type = "n")
lines(exdata$DateTime, exdata$Global_active_power, type = "l")
plot(exdata$DateTime, exdata$Global_active_power, type = "n", xlab = "", ylab = "Global Active Power (kilowatts)")
lines(exdata$DateTime, exdata$Global_active_power, type = "l")
source('~/GitHub/ExData_Plotting1/plot2.R')
source('~/GitHub/ExData_Plotting1/plot2.R')
plot(exdata$DateTime, exdata$Sub_metering_1, type = "n", xlab = "",
ylab = "Energy sub metering")
lines(exdata$DateTime, exdata$Sub_metering_1, type="l")
lines(exdata$DateTime, exdata$Sub_metering_2, type="l", col="red")
lines(exdata$DateTime, exdata$Sub_metering_3, type="l", col="blue")
legend("topright", names(exdata[,7:9]))
legend("topright", names(exdata[,7:9]), col=c("black","red","blue"))
plot(exdata$DateTime, exdata$Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering")
lines(exdata$DateTime, exdata$Sub_metering_1, type="l")
lines(exdata$DateTime, exdata$Sub_metering_2, type="l", col="red")
lines(exdata$DateTime, exdata$Sub_metering_3, type="l", col="blue")
legend("topright", names(exdata[,7:9]), col=c("black","red","blue"), lty=1, bty="n", cex=.75)
legend("topright", names(exdata[,7:9]), col=c("black","red","blue"), lty=1, bty="n", cex=.75, border = "black")
plot(exdata$DateTime, exdata$Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering")
lines(exdata$DateTime, exdata$Sub_metering_1, type="l")
lines(exdata$DateTime, exdata$Sub_metering_2, type="l", col="red")
lines(exdata$DateTime, exdata$Sub_metering_3, type="l", col="blue")
legend("topright", names(exdata[,7:9]), col=c("black","red","blue"), lty=1, bty="n", cex=.75, border = "black")
legend("topright", names(exdata[,7:9]), col=c("black","red","blue"), lty=1, bty="n", cex=.75, border = "black", fill="white")
legend("topright", names(exdata[,7:9]), col=c("black","red","blue"), lty=1, cex=.75, border = "black", fill="white")
legend("topright", names(exdata[,7:9]), col=c("black","red","blue"), lty=1, cex=.75)
plot(exdata$DateTime, exdata$Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering")
lines(exdata$DateTime, exdata$Sub_metering_1, type="l")
lines(exdata$DateTime, exdata$Sub_metering_2, type="l", col="red")
lines(exdata$DateTime, exdata$Sub_metering_3, type="l", col="blue")
legend("topright", names(exdata[,7:9]), col=c("black","red","blue"), lty=1, cex=.75)
source('~/GitHub/ExData_Plotting1/plot2.R')
source('~/GitHub/ExData_Plotting1/plot3.R')
source('~/GitHub/ExData_Plotting1/plot3.R')
source('~/GitHub/ExData_Plotting1/plot2.R')
plot(exdata$DateTime, exdata$Global_active_power, type = "n", xlab = "", ylab = "Global Active Power (kilowatts)")
lines(exdata$DateTime, exdata$Global_active_power, type="l")
source('~/GitHub/ExData_Plotting1/plot4.R')
par(mfrow=c(2,2))
plot(exdata$DateTime, exdata$Global_active_power, type = "n", xlab = "", ylab = "Global Active Power (kilowatts)")
lines(exdata$DateTime, exdata$Global_active_power, type="l")
plot(exdata$DateTime, exdata$Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering")
lines(exdata$DateTime, exdata$Sub_metering_1, type="l")
lines(exdata$DateTime, exdata$Sub_metering_2, type="l", col="red")
lines(exdata$DateTime, exdata$Sub_metering_3, type="l", col="blue")
legend("topright", names(exdata[,7:9]), col=c("black","red","blue"), lty=1, cex=.75)
plot(exdata$DateTime, exdata$Sub_metering_1, type = "n", xlab = "", ylab = "Energy sub metering")
lines(exdata$DateTime, exdata$Sub_metering_1, type="l")
lines(exdata$DateTime, exdata$Sub_metering_2, type="l", col="red")
lines(exdata$DateTime, exdata$Sub_metering_3, type="l", col="blue")
legend("topright", names(exdata[,7:9]), col=c("black","red","blue"), lty=1, cex=.75, bty="n")
source('~/GitHub/ExData_Plotting1/plot4.R')
setwd("C:/Users/kerry_000/Documents/GitHub/RepData_PeerAssessment1")
```
data<-read.csv("./activity/activity.csv")
str(data)
#dev.off()
source('~/GitHub/ExData_Plotting1/plot4.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
str(data)
head(data)
summerize(data)
Summerize(data)
Summary(data)
class(data)
hist(data$steps)
hist(data$steps
sum(data$steps)
sum(data[,1])
library(dplyr)
data %>% group_by(date) %>% summarise(steps = sum(steps))
library(dplyr)
data %>% group_by(date) %>% summarise(steps = sum(steps))
x<-group_by(data$date)
str(data)
x<-group_by(as.Date(data$date))
x<-group_by(as.Date(as.character(data$date)))
x<-group_by(data$interval)
x<-group_by(as.character(data$date))
group_by(data, steps)
group_by(data, date)
x<-group_by(data, date)
x<-group_by(data, as.Date(date))
data<-read.table("./activity/activity.csv")
table(data)
x<-table(data)
data<-table(data)
data %>% group_by(date) %>% summarise(steps = sum(steps))
data %>% group_by(data,date) %>% summarise(steps = sum(steps))
group_by(data, date)
group_by_(data, date)
library(dplyr)
data %>% group_by(date) %>% summarise(steps = sum(steps))
class(data)
setwd("C:/Users/kerry_000/Documents/GitHub/RepData_PeerAssessment1")
data<-read.csv("./activity/activity.csv")
class(data)
data %>% group_by(date) %>% summarise(steps = sum(steps))
library(data.table)
data<-table(data)
data[, sum(steps), by = date]
data[, sum(data$steps), by = data$date]
names(data)
names(data)<-c(steps, date, interval)
names(data)<-c("steps", "date", "interval")
data[, sum(steps), by = date]
data[, sum(data$steps), by = data$date]
names(data)
data<-read.table("./activity/activity.csv")
aggregate(steps ~ date, data, sum)
aggregate(steps ~ date, data=data, FUN=sum)
DFActivity<-read.csv("./activity/activity.csv")
names(DFActivity)
str(DFActivity)
tail(DFActivity)
head(DFActivity)
summarise(DFActivity)
DFA[1:100,]
DFActivity[1:100,]
DFActivity<-read.table(file = "./activity/activity.csv",  header=TRUE, sep = ",")
DFActivity
str(DFActivity)
DFActivity<-read.table(file = "./activity/activity.csv",  header=TRUE, sep = ",")
str(DFActivity)
library(data.table)
names(DFActivity)
setwd("C:/Users/kerry_000/Documents/GitHub/RepData_PeerAssessment1")
RawData<-read.csv("./activity/activity.csv")
# Convert date variable from factor to date, and remove NAs
CleanData <- na.omit(RawData)
CleanData$date <- as.Date(CleanData$date)
library(dplyr)
CleanData %>% group_by(date) %>% summarise(TotalSteps = sum(steps))
group_by(CleanData$date)
libPaths()
.libPaths()
Rinside
install.packages("dplyr")
setwd("C:/Users/kerry_000/Documents/GitHub/RepData_PeerAssessment1")
RawData<-read.csv("./activity/activity.csv")
# Convert date variable from factor to date, and remove NAs
CleanData <- na.omit(RawData)
CleanData$date <- as.Date(CleanData$date)
library(dplyr)
CleanData %>% group_by(date) %>% summarise(TotalSteps = sum(steps))
StepsPerDay <- CleanData %>% group_by(date) %>% summarise(TotalSteps = sum(steps))
hist(StepsPerDay$TotalSteps)
hist(StepsPerDay$TotalSteps)
xlab="Total steps taken per day",
hist(StepsPerDay$TotalSteps,
xlab="Total steps taken per day",
ylab="Count",
main="Histogram of total number of steps taken each day",
col=3)
hist(StepsPerDay$TotalSteps,
xlab="Total steps taken per day",
ylab="Count",
main="Histogram of total number of steps taken each day",
col="red")
MeanStepsperDay <- mean(StepsPerDay$TotalSteps)
MedianSepsperDay <- median(StepsPerDay$TotalSteps)
```{r, results='hide'}
CleanData %>% group_by(interval) %>% summarise(5MinuteInterval = mean(steps))
CleanData %>% group_by(interval) %>% summarise(5MinuteInterval = mean(steps))
CleanData %>% group_by(interval) %>% summarise(FiveMinuteInterval = mean(steps))
StepsperInterval <- CleanData %>% group_by(interval) %>% summarise(meanstepsperinterval = mean(steps))
StepsperInterval
CleanData[CleanData$interval==5,]
plot(StepsperInterval$interval, StepsperInterval$meanstepsperinterval, type = 'l')
plot(StepsperInterval$interval, StepsperInterval$meanstepsperinterval,
type = 'l',
xlab = "Five minute interval",
ylab = "Average number of steps",
main = "Average Steps Taken by Five Minute Interval Across All Days")
maxaverage<- StepsperInterval[max(StepsperInterval$meanstepsperinterval), 1]
maxaverage
max(StepsperInterval$meanstepsperinterval)
maxaverage<- StepsperInterval[StepsperInterval$meanstepsperinterval==max(StepsperInterval$meanstepsperinterval), 1]
maxaverage<- StepsperInterval[StepsperInterval$meanstepsperinterval==max(StepsperInterval$meanstepsperinterval), 1]
maxaverage
sum(is.na(RawData$steps))
RawData[is.na(RawData$steps),]
RawData[is.na(RawData$steps),3]
x<-RawData[is.na(RawData$steps),3]
StepsperInterval[x,]
x
StepsperInterval[StepsperInterval$interval in x,]
intervalwithna<-RawData[is.na(RawData$steps),3]
intervalwithna<-RawData[is.na(RawData$steps),-2]
head(intervalwithna)
intervalwithna<-which(is.na(RawData$steps)
)
intervalwithna
View(StepsperInterval)
for(i in intervalwithna){
#replace the NA steps with the mean for the time interval
RawData[i,1]<- StepsperInterval[StepsperInterval[,1]==RawData[i,3],2]
}
RawData<-read.csv("./activity/activity.csv")
intervalwithna<-which(is.na(RawData$steps))
#copy RawData to preserve original
fulldata<-RawData
for(i in intervalwithna){
#replace the NA steps with the mean for the time interval
fulldata[i,1]<- StepsperInterval[StepsperInterval[,1]==fulldata[i,3],2]
}
View(fulldata)
x<-which(is.na(fulldata$steps))
intervalwithna<-which(is.na(RawData$steps))
#copy RawData to preserve original
fulldata<-RawData
fulldata[1,1]
StepsperInterval[StepsperInterval[,1]==fulldata[1,3],2]
fulldata[1,]
StepsperInterval[StepsperInterval[,1]==fulldata[1.3],2]
StepsperInterval[StepsperInterval[,1]==fulldata[1,3],2]
View(StepsperInterval)
View(StepsperInterval)
weekdays(fulldata$date)
?weekdays
class(fulldata$date)
fulldata$date<-as.Date(fulldata$date)
class(fulldata$date)
weekdays(fulldata$date)
fulldata$dayofweek <- weekdays(fulldata$date)
View(fulldata)
fulldata$dayofweek <- weekdays(fulldata$date)
fulldata$dayofweektype <- "weekday"
fulldata$dayofweektype[filldata$day %in% c("Saturday", "Sunday")] <- "weekend"]
fulldata$dayofweek <- weekdays(fulldata$date)
fulldata$dayofweektype <- "weekday"
fulldata$dayofweektype[filldata$day %in% c("Saturday", "Sunday")] <- "weekend"
fulldata$dayofweek <- weekdays(fulldata$date)
fulldata$dayofweektype <- "weekday"
fulldata$dayofweektype[fulldata$dayofweek %in% c("Saturday", "Sunday")] <- "weekend"
View(fulldata)
